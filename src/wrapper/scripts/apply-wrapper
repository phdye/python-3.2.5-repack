#!/usr/bin/env python3
"""Apply wrapper to compiled executables.

Usage:
  apply-wrapper [options] [DIRECTORY]

Options:
  -w WRAP, --wrapper WRAP   Path to wrapper executable [default: ~/bin/wrapper]
  -m, --magic               Require python-magic to determine binary type.
  -h, --help                Show this help message.
"""

import argparse
import os
import shutil
import sys

# While the complete marker includes a version identifier, the prefix
# alone identifies a binary as an instance of the wrapper.
WRAPPER_MARKER_PREFIX = b"PY_WRAPPER_"


def parse_args():
    parser = argparse.ArgumentParser(
        description="Apply wrapper to compiled executables.",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )
    parser.add_argument(
        "directory",
        nargs="?",
        default=".",
        help="Directory to scan [default: current directory]"
    )
    parser.add_argument(
        "-w", "--wrapper",
        default=os.path.expanduser("~/bin/wrapper"),
        help="Path to wrapper executable"
    )
    parser.add_argument(
        "-m", "--require-magic",
        action="store_true",
        help="Require python-magic to determine binary type"
    )
    return parser.parse_args()


def contains_marker(path, marker=WRAPPER_MARKER_PREFIX):
    try:
        with open(path, "rb") as f:
            data = f.read()
        return marker in data
    except IOError:
        return False


def is_executable(path):
    return os.path.isfile(path) and os.access(path, os.X_OK)


def check_magic(path):
    try:
        import magic
    except ImportError as exc:
        raise RuntimeError("python-magic not available") from exc

    try:
        mime = magic.from_file(path, mime=True)
    except Exception:
        return False

    if not mime:
        return False
    if mime.startswith("text/") or "script" in mime:
        return False
    return True


def check_header(path):
    try:
        with open(path, "rb") as f:
            header = f.read(4)
    except IOError:
        return False
    if header.startswith(b"\x7fELF"):
        return True
    if header.startswith(b"MZ"):
        return True
    if header in (b"\xcf\xfa\xed\xfe", b"\xfe\xed\xfa\xcf", b"\xfe\xed\xfa\xce", b"\xce\xfa\xed\xfe"):
        return True
    return False


def is_compiled_binary(path, require_magic=False):
    has_magic = False
    try:
        import magic  # noqa: F401
        has_magic = True
    except ImportError:
        if require_magic:
            raise RuntimeError("python-magic required but not available")

    if has_magic:
        try:
            return check_magic(path)
        except RuntimeError:
            if require_magic:
                raise
    return check_header(path)


def main():
    args = parse_args()
    directory = args.directory
    wrapper = os.path.expanduser(args.wrapper)
    require_magic = args.require_magic

    # Canonical wrapper path relative to this script
    script_dir = os.path.dirname(os.path.realpath(__file__))
    canonical_wrapper = os.path.join(script_dir, "..", "wrapper")

    if os.path.isfile(canonical_wrapper):
        if os.path.isfile(wrapper):
            w_time = os.path.getmtime(wrapper)
            c_time = os.path.getmtime(canonical_wrapper)
            w_size = os.path.getsize(wrapper)
            c_size = os.path.getsize(canonical_wrapper)
            if (not os.path.samefile(wrapper, canonical_wrapper) and
                    (c_time > w_time or c_size != w_size)):
                print(f"Using newer wrapper from {canonical_wrapper}")
                wrapper = canonical_wrapper
        else:
            wrapper = canonical_wrapper

    if not os.path.isfile(wrapper):
        sys.exit(f"Wrapper not found: {wrapper}")

    dest_dir = os.path.join(directory, "actual")
    os.makedirs(dest_dir, exist_ok=True)

    entries = os.listdir(directory)
    print("Scanning directory:", directory)
    for name in entries:
        path = os.path.join(directory, name)
        if not is_executable(path):
            continue
        try:
            if not is_compiled_binary(path, require_magic=require_magic):
                continue
        except RuntimeError as exc:
            sys.exit(str(exc))
        target = os.path.join(dest_dir, name)

        if contains_marker(path):
            # Existing wrapper binary
            need_update = (
                os.path.getsize(path) != os.path.getsize(wrapper)
                or os.path.getmtime(wrapper) > os.path.getmtime(path)
            )
            if need_update:
                print(f"Updating wrapper in {path}")
                shutil.copy2(wrapper, path)
            else:
                print(f"'{path}' already wrapped")
            continue

        # Newly built executable
        if os.path.exists(target):
            print(f"Replacing {target} with new executable")
            os.remove(target)
        else:
            print(f"Moving {path} -> {target}")
        shutil.move(path, target)
        print(f"Copying wrapper to {path}")
        shutil.copy2(wrapper, path)

    print("SUCCESS: Everything succeeded or already present")


if __name__ == "__main__":
    main()
